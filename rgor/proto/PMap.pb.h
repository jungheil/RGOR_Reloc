// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PMap.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_PMap_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_PMap_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_PMap_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_PMap_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_PMap_2eproto;
class PMPDescriptor;
struct PMPDescriptorDefaultTypeInternal;
extern PMPDescriptorDefaultTypeInternal _PMPDescriptor_default_instance_;
class PMPPose;
struct PMPPoseDefaultTypeInternal;
extern PMPPoseDefaultTypeInternal _PMPPose_default_instance_;
class PMPScale;
struct PMPScaleDefaultTypeInternal;
extern PMPScaleDefaultTypeInternal _PMPScale_default_instance_;
class PMap;
struct PMapDefaultTypeInternal;
extern PMapDefaultTypeInternal _PMap_default_instance_;
class PMapPoint;
struct PMapPointDefaultTypeInternal;
extern PMapPointDefaultTypeInternal _PMapPoint_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::PMPDescriptor* Arena::CreateMaybeMessage<::PMPDescriptor>(Arena*);
template<> ::PMPPose* Arena::CreateMaybeMessage<::PMPPose>(Arena*);
template<> ::PMPScale* Arena::CreateMaybeMessage<::PMPScale>(Arena*);
template<> ::PMap* Arena::CreateMaybeMessage<::PMap>(Arena*);
template<> ::PMapPoint* Arena::CreateMaybeMessage<::PMapPoint>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class PMPDescriptor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PMPDescriptor) */ {
 public:
  inline PMPDescriptor() : PMPDescriptor(nullptr) {}
  ~PMPDescriptor() override;
  explicit PROTOBUF_CONSTEXPR PMPDescriptor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PMPDescriptor(const PMPDescriptor& from);
  PMPDescriptor(PMPDescriptor&& from) noexcept
    : PMPDescriptor() {
    *this = ::std::move(from);
  }

  inline PMPDescriptor& operator=(const PMPDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline PMPDescriptor& operator=(PMPDescriptor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PMPDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const PMPDescriptor* internal_default_instance() {
    return reinterpret_cast<const PMPDescriptor*>(
               &_PMPDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PMPDescriptor& a, PMPDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(PMPDescriptor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PMPDescriptor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PMPDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PMPDescriptor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PMPDescriptor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PMPDescriptor& from) {
    PMPDescriptor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PMPDescriptor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PMPDescriptor";
  }
  protected:
  explicit PMPDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated float data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  float _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_data() const;
  void _internal_add_data(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_data();
  public:
  float data(int index) const;
  void set_data(int index, float value);
  void add_data(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:PMPDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PMap_2eproto;
};
// -------------------------------------------------------------------

class PMPPose final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PMPPose) */ {
 public:
  inline PMPPose() : PMPPose(nullptr) {}
  ~PMPPose() override;
  explicit PROTOBUF_CONSTEXPR PMPPose(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PMPPose(const PMPPose& from);
  PMPPose(PMPPose&& from) noexcept
    : PMPPose() {
    *this = ::std::move(from);
  }

  inline PMPPose& operator=(const PMPPose& from) {
    CopyFrom(from);
    return *this;
  }
  inline PMPPose& operator=(PMPPose&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PMPPose& default_instance() {
    return *internal_default_instance();
  }
  static inline const PMPPose* internal_default_instance() {
    return reinterpret_cast<const PMPPose*>(
               &_PMPPose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PMPPose& a, PMPPose& b) {
    a.Swap(&b);
  }
  inline void Swap(PMPPose* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PMPPose* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PMPPose* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PMPPose>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PMPPose& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PMPPose& from) {
    PMPPose::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PMPPose* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PMPPose";
  }
  protected:
  explicit PMPPose(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // required float x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // required float y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // required float z = 3;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:PMPPose)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float x_;
    float y_;
    float z_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PMap_2eproto;
};
// -------------------------------------------------------------------

class PMPScale final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PMPScale) */ {
 public:
  inline PMPScale() : PMPScale(nullptr) {}
  ~PMPScale() override;
  explicit PROTOBUF_CONSTEXPR PMPScale(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PMPScale(const PMPScale& from);
  PMPScale(PMPScale&& from) noexcept
    : PMPScale() {
    *this = ::std::move(from);
  }

  inline PMPScale& operator=(const PMPScale& from) {
    CopyFrom(from);
    return *this;
  }
  inline PMPScale& operator=(PMPScale&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PMPScale& default_instance() {
    return *internal_default_instance();
  }
  static inline const PMPScale* internal_default_instance() {
    return reinterpret_cast<const PMPScale*>(
               &_PMPScale_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PMPScale& a, PMPScale& b) {
    a.Swap(&b);
  }
  inline void Swap(PMPScale* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PMPScale* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PMPScale* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PMPScale>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PMPScale& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PMPScale& from) {
    PMPScale::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PMPScale* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PMPScale";
  }
  protected:
  explicit PMPScale(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSFieldNumber = 1,
    kLFieldNumber = 2,
  };
  // required float s = 1;
  bool has_s() const;
  private:
  bool _internal_has_s() const;
  public:
  void clear_s();
  float s() const;
  void set_s(float value);
  private:
  float _internal_s() const;
  void _internal_set_s(float value);
  public:

  // required float l = 2;
  bool has_l() const;
  private:
  bool _internal_has_l() const;
  public:
  void clear_l();
  float l() const;
  void set_l(float value);
  private:
  float _internal_l() const;
  void _internal_set_l(float value);
  public:

  // @@protoc_insertion_point(class_scope:PMPScale)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float s_;
    float l_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PMap_2eproto;
};
// -------------------------------------------------------------------

class PMapPoint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PMapPoint) */ {
 public:
  inline PMapPoint() : PMapPoint(nullptr) {}
  ~PMapPoint() override;
  explicit PROTOBUF_CONSTEXPR PMapPoint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PMapPoint(const PMapPoint& from);
  PMapPoint(PMapPoint&& from) noexcept
    : PMapPoint() {
    *this = ::std::move(from);
  }

  inline PMapPoint& operator=(const PMapPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline PMapPoint& operator=(PMapPoint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PMapPoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const PMapPoint* internal_default_instance() {
    return reinterpret_cast<const PMapPoint*>(
               &_PMapPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PMapPoint& a, PMapPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(PMapPoint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PMapPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PMapPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PMapPoint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PMapPoint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PMapPoint& from) {
    PMapPoint::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PMapPoint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PMapPoint";
  }
  protected:
  explicit PMapPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoseFieldNumber = 1,
    kScaleFieldNumber = 2,
    kDescFieldNumber = 3,
  };
  // required .PMPPose pose = 1;
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::PMPPose& pose() const;
  PROTOBUF_NODISCARD ::PMPPose* release_pose();
  ::PMPPose* mutable_pose();
  void set_allocated_pose(::PMPPose* pose);
  private:
  const ::PMPPose& _internal_pose() const;
  ::PMPPose* _internal_mutable_pose();
  public:
  void unsafe_arena_set_allocated_pose(
      ::PMPPose* pose);
  ::PMPPose* unsafe_arena_release_pose();

  // required .PMPScale scale = 2;
  bool has_scale() const;
  private:
  bool _internal_has_scale() const;
  public:
  void clear_scale();
  const ::PMPScale& scale() const;
  PROTOBUF_NODISCARD ::PMPScale* release_scale();
  ::PMPScale* mutable_scale();
  void set_allocated_scale(::PMPScale* scale);
  private:
  const ::PMPScale& _internal_scale() const;
  ::PMPScale* _internal_mutable_scale();
  public:
  void unsafe_arena_set_allocated_scale(
      ::PMPScale* scale);
  ::PMPScale* unsafe_arena_release_scale();

  // required .PMPDescriptor desc = 3;
  bool has_desc() const;
  private:
  bool _internal_has_desc() const;
  public:
  void clear_desc();
  const ::PMPDescriptor& desc() const;
  PROTOBUF_NODISCARD ::PMPDescriptor* release_desc();
  ::PMPDescriptor* mutable_desc();
  void set_allocated_desc(::PMPDescriptor* desc);
  private:
  const ::PMPDescriptor& _internal_desc() const;
  ::PMPDescriptor* _internal_mutable_desc();
  public:
  void unsafe_arena_set_allocated_desc(
      ::PMPDescriptor* desc);
  ::PMPDescriptor* unsafe_arena_release_desc();

  // @@protoc_insertion_point(class_scope:PMapPoint)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PMPPose* pose_;
    ::PMPScale* scale_;
    ::PMPDescriptor* desc_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PMap_2eproto;
};
// -------------------------------------------------------------------

class PMap final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PMap) */ {
 public:
  inline PMap() : PMap(nullptr) {}
  ~PMap() override;
  explicit PROTOBUF_CONSTEXPR PMap(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PMap(const PMap& from);
  PMap(PMap&& from) noexcept
    : PMap() {
    *this = ::std::move(from);
  }

  inline PMap& operator=(const PMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline PMap& operator=(PMap&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PMap& default_instance() {
    return *internal_default_instance();
  }
  static inline const PMap* internal_default_instance() {
    return reinterpret_cast<const PMap*>(
               &_PMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PMap& a, PMap& b) {
    a.Swap(&b);
  }
  inline void Swap(PMap* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PMap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PMap>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PMap& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PMap& from) {
    PMap::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PMap* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PMap";
  }
  protected:
  explicit PMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 1,
  };
  // repeated .PMapPoint points = 1;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::PMapPoint* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PMapPoint >*
      mutable_points();
  private:
  const ::PMapPoint& _internal_points(int index) const;
  ::PMapPoint* _internal_add_points();
  public:
  const ::PMapPoint& points(int index) const;
  ::PMapPoint* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PMapPoint >&
      points() const;

  // @@protoc_insertion_point(class_scope:PMap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PMapPoint > points_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PMap_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PMPDescriptor

// repeated float data = 1;
inline int PMPDescriptor::_internal_data_size() const {
  return _impl_.data_.size();
}
inline int PMPDescriptor::data_size() const {
  return _internal_data_size();
}
inline void PMPDescriptor::clear_data() {
  _impl_.data_.Clear();
}
inline float PMPDescriptor::_internal_data(int index) const {
  return _impl_.data_.Get(index);
}
inline float PMPDescriptor::data(int index) const {
  // @@protoc_insertion_point(field_get:PMPDescriptor.data)
  return _internal_data(index);
}
inline void PMPDescriptor::set_data(int index, float value) {
  _impl_.data_.Set(index, value);
  // @@protoc_insertion_point(field_set:PMPDescriptor.data)
}
inline void PMPDescriptor::_internal_add_data(float value) {
  _impl_.data_.Add(value);
}
inline void PMPDescriptor::add_data(float value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:PMPDescriptor.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PMPDescriptor::_internal_data() const {
  return _impl_.data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PMPDescriptor::data() const {
  // @@protoc_insertion_point(field_list:PMPDescriptor.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PMPDescriptor::_internal_mutable_data() {
  return &_impl_.data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PMPDescriptor::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:PMPDescriptor.data)
  return _internal_mutable_data();
}

// -------------------------------------------------------------------

// PMPPose

// required float x = 1;
inline bool PMPPose::_internal_has_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PMPPose::has_x() const {
  return _internal_has_x();
}
inline void PMPPose::clear_x() {
  _impl_.x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float PMPPose::_internal_x() const {
  return _impl_.x_;
}
inline float PMPPose::x() const {
  // @@protoc_insertion_point(field_get:PMPPose.x)
  return _internal_x();
}
inline void PMPPose::_internal_set_x(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.x_ = value;
}
inline void PMPPose::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:PMPPose.x)
}

// required float y = 2;
inline bool PMPPose::_internal_has_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PMPPose::has_y() const {
  return _internal_has_y();
}
inline void PMPPose::clear_y() {
  _impl_.y_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float PMPPose::_internal_y() const {
  return _impl_.y_;
}
inline float PMPPose::y() const {
  // @@protoc_insertion_point(field_get:PMPPose.y)
  return _internal_y();
}
inline void PMPPose::_internal_set_y(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.y_ = value;
}
inline void PMPPose::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:PMPPose.y)
}

// required float z = 3;
inline bool PMPPose::_internal_has_z() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PMPPose::has_z() const {
  return _internal_has_z();
}
inline void PMPPose::clear_z() {
  _impl_.z_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float PMPPose::_internal_z() const {
  return _impl_.z_;
}
inline float PMPPose::z() const {
  // @@protoc_insertion_point(field_get:PMPPose.z)
  return _internal_z();
}
inline void PMPPose::_internal_set_z(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.z_ = value;
}
inline void PMPPose::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:PMPPose.z)
}

// -------------------------------------------------------------------

// PMPScale

// required float s = 1;
inline bool PMPScale::_internal_has_s() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PMPScale::has_s() const {
  return _internal_has_s();
}
inline void PMPScale::clear_s() {
  _impl_.s_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float PMPScale::_internal_s() const {
  return _impl_.s_;
}
inline float PMPScale::s() const {
  // @@protoc_insertion_point(field_get:PMPScale.s)
  return _internal_s();
}
inline void PMPScale::_internal_set_s(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.s_ = value;
}
inline void PMPScale::set_s(float value) {
  _internal_set_s(value);
  // @@protoc_insertion_point(field_set:PMPScale.s)
}

// required float l = 2;
inline bool PMPScale::_internal_has_l() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PMPScale::has_l() const {
  return _internal_has_l();
}
inline void PMPScale::clear_l() {
  _impl_.l_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float PMPScale::_internal_l() const {
  return _impl_.l_;
}
inline float PMPScale::l() const {
  // @@protoc_insertion_point(field_get:PMPScale.l)
  return _internal_l();
}
inline void PMPScale::_internal_set_l(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.l_ = value;
}
inline void PMPScale::set_l(float value) {
  _internal_set_l(value);
  // @@protoc_insertion_point(field_set:PMPScale.l)
}

// -------------------------------------------------------------------

// PMapPoint

// required .PMPPose pose = 1;
inline bool PMapPoint::_internal_has_pose() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pose_ != nullptr);
  return value;
}
inline bool PMapPoint::has_pose() const {
  return _internal_has_pose();
}
inline void PMapPoint::clear_pose() {
  if (_impl_.pose_ != nullptr) _impl_.pose_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::PMPPose& PMapPoint::_internal_pose() const {
  const ::PMPPose* p = _impl_.pose_;
  return p != nullptr ? *p : reinterpret_cast<const ::PMPPose&>(
      ::_PMPPose_default_instance_);
}
inline const ::PMPPose& PMapPoint::pose() const {
  // @@protoc_insertion_point(field_get:PMapPoint.pose)
  return _internal_pose();
}
inline void PMapPoint::unsafe_arena_set_allocated_pose(
    ::PMPPose* pose) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pose_);
  }
  _impl_.pose_ = pose;
  if (pose) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PMapPoint.pose)
}
inline ::PMPPose* PMapPoint::release_pose() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PMPPose* temp = _impl_.pose_;
  _impl_.pose_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PMPPose* PMapPoint::unsafe_arena_release_pose() {
  // @@protoc_insertion_point(field_release:PMapPoint.pose)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PMPPose* temp = _impl_.pose_;
  _impl_.pose_ = nullptr;
  return temp;
}
inline ::PMPPose* PMapPoint::_internal_mutable_pose() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::PMPPose>(GetArenaForAllocation());
    _impl_.pose_ = p;
  }
  return _impl_.pose_;
}
inline ::PMPPose* PMapPoint::mutable_pose() {
  ::PMPPose* _msg = _internal_mutable_pose();
  // @@protoc_insertion_point(field_mutable:PMapPoint.pose)
  return _msg;
}
inline void PMapPoint::set_allocated_pose(::PMPPose* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pose_;
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pose);
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:PMapPoint.pose)
}

// required .PMPScale scale = 2;
inline bool PMapPoint::_internal_has_scale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.scale_ != nullptr);
  return value;
}
inline bool PMapPoint::has_scale() const {
  return _internal_has_scale();
}
inline void PMapPoint::clear_scale() {
  if (_impl_.scale_ != nullptr) _impl_.scale_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::PMPScale& PMapPoint::_internal_scale() const {
  const ::PMPScale* p = _impl_.scale_;
  return p != nullptr ? *p : reinterpret_cast<const ::PMPScale&>(
      ::_PMPScale_default_instance_);
}
inline const ::PMPScale& PMapPoint::scale() const {
  // @@protoc_insertion_point(field_get:PMapPoint.scale)
  return _internal_scale();
}
inline void PMapPoint::unsafe_arena_set_allocated_scale(
    ::PMPScale* scale) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scale_);
  }
  _impl_.scale_ = scale;
  if (scale) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PMapPoint.scale)
}
inline ::PMPScale* PMapPoint::release_scale() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PMPScale* temp = _impl_.scale_;
  _impl_.scale_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PMPScale* PMapPoint::unsafe_arena_release_scale() {
  // @@protoc_insertion_point(field_release:PMapPoint.scale)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PMPScale* temp = _impl_.scale_;
  _impl_.scale_ = nullptr;
  return temp;
}
inline ::PMPScale* PMapPoint::_internal_mutable_scale() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.scale_ == nullptr) {
    auto* p = CreateMaybeMessage<::PMPScale>(GetArenaForAllocation());
    _impl_.scale_ = p;
  }
  return _impl_.scale_;
}
inline ::PMPScale* PMapPoint::mutable_scale() {
  ::PMPScale* _msg = _internal_mutable_scale();
  // @@protoc_insertion_point(field_mutable:PMapPoint.scale)
  return _msg;
}
inline void PMapPoint::set_allocated_scale(::PMPScale* scale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.scale_;
  }
  if (scale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(scale);
    if (message_arena != submessage_arena) {
      scale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scale, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.scale_ = scale;
  // @@protoc_insertion_point(field_set_allocated:PMapPoint.scale)
}

// required .PMPDescriptor desc = 3;
inline bool PMapPoint::_internal_has_desc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.desc_ != nullptr);
  return value;
}
inline bool PMapPoint::has_desc() const {
  return _internal_has_desc();
}
inline void PMapPoint::clear_desc() {
  if (_impl_.desc_ != nullptr) _impl_.desc_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::PMPDescriptor& PMapPoint::_internal_desc() const {
  const ::PMPDescriptor* p = _impl_.desc_;
  return p != nullptr ? *p : reinterpret_cast<const ::PMPDescriptor&>(
      ::_PMPDescriptor_default_instance_);
}
inline const ::PMPDescriptor& PMapPoint::desc() const {
  // @@protoc_insertion_point(field_get:PMapPoint.desc)
  return _internal_desc();
}
inline void PMapPoint::unsafe_arena_set_allocated_desc(
    ::PMPDescriptor* desc) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.desc_);
  }
  _impl_.desc_ = desc;
  if (desc) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PMapPoint.desc)
}
inline ::PMPDescriptor* PMapPoint::release_desc() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PMPDescriptor* temp = _impl_.desc_;
  _impl_.desc_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PMPDescriptor* PMapPoint::unsafe_arena_release_desc() {
  // @@protoc_insertion_point(field_release:PMapPoint.desc)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PMPDescriptor* temp = _impl_.desc_;
  _impl_.desc_ = nullptr;
  return temp;
}
inline ::PMPDescriptor* PMapPoint::_internal_mutable_desc() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.desc_ == nullptr) {
    auto* p = CreateMaybeMessage<::PMPDescriptor>(GetArenaForAllocation());
    _impl_.desc_ = p;
  }
  return _impl_.desc_;
}
inline ::PMPDescriptor* PMapPoint::mutable_desc() {
  ::PMPDescriptor* _msg = _internal_mutable_desc();
  // @@protoc_insertion_point(field_mutable:PMapPoint.desc)
  return _msg;
}
inline void PMapPoint::set_allocated_desc(::PMPDescriptor* desc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.desc_;
  }
  if (desc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(desc);
    if (message_arena != submessage_arena) {
      desc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, desc, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.desc_ = desc;
  // @@protoc_insertion_point(field_set_allocated:PMapPoint.desc)
}

// -------------------------------------------------------------------

// PMap

// repeated .PMapPoint points = 1;
inline int PMap::_internal_points_size() const {
  return _impl_.points_.size();
}
inline int PMap::points_size() const {
  return _internal_points_size();
}
inline void PMap::clear_points() {
  _impl_.points_.Clear();
}
inline ::PMapPoint* PMap::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:PMap.points)
  return _impl_.points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PMapPoint >*
PMap::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:PMap.points)
  return &_impl_.points_;
}
inline const ::PMapPoint& PMap::_internal_points(int index) const {
  return _impl_.points_.Get(index);
}
inline const ::PMapPoint& PMap::points(int index) const {
  // @@protoc_insertion_point(field_get:PMap.points)
  return _internal_points(index);
}
inline ::PMapPoint* PMap::_internal_add_points() {
  return _impl_.points_.Add();
}
inline ::PMapPoint* PMap::add_points() {
  ::PMapPoint* _add = _internal_add_points();
  // @@protoc_insertion_point(field_add:PMap.points)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PMapPoint >&
PMap::points() const {
  // @@protoc_insertion_point(field_list:PMap.points)
  return _impl_.points_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_PMap_2eproto
